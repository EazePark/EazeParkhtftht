import cv2
import pytesseract
import mysql.connector
import re
from datetime import datetime, timedelta
import subprocess
import webbrowser
import time
import pyautogui
from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer
import threading

# Path to the Tesseract executable (change this to your Tesseract installation path)
pytesseract.pytesseract.tesseract_cmd = r'C:\\Tesseract\\tesseract.exe'
money = False

# Connect to the MySQL database
db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="dpsbn",
    database="cars"
)

def extract_car_number(frame):
    # Convert the frame to grayscale for better OCR results
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # Apply adaptive thresholding to enhance text visibility
    thresholded = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)

    # Perform OCR using Tesseract
    car_number = pytesseract.image_to_string(thresholded)

    return car_number.strip()

def calculate_charges(timestamp):
    # Calculate the time difference between the current timestamp and the given timestamp
    current_time = datetime.now()
    time_difference = current_time - timestamp

    # Calculate the total number of hours (rounded up)
    total_hours = int((time_difference.total_seconds() + 3599) / 3600)

    # Calculate the charges based on the rate: 2 hours = 30 Rs, additional hour = 10 Rs
    base_charge = 30
    additional_charge_per_hour = 10
    total_charge = base_charge + max(total_hours - 2, 0) * additional_charge_per_hour

    return total_hours, total_charge

car_number_detected = False

state_patterns = {
    'AN': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Andaman and Nicobar Islands
    'AP': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Andhra Pradesh
    'AR': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Arunachal Pradesh
    'AS': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Assam
    'BR': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Bihar
    'CH': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Chandigarh
    'CT': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Chhattisgarh
    'DD': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Dadra and Nagar Haveli and Daman and Diu
    'DL': r'^[A-Z]{2}\s\d{1,2}\s[A-Z]{1,2}\s\d{4}$',  # Delhi
    'DN': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Dadra and Nagar Haveli and Daman and Diu
    'GA': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Goa
    'GJ': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Gujarat
    'HP': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Himachal Pradesh
    'HR': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Haryana
    'JH': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Jharkhand
    'JK': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Jammu and Kashmir
    'KA': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Karnataka
    'KL': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Kerala
    'LA': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Ladakh
    'LD': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Lakshadweep
    'MH': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Maharashtra
    'ML': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Meghalaya
    'MN': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Manipur
    'MP': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Madhya Pradesh
    'MZ': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Mizoram
    'NL': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Nagaland
    'OD': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Odisha
    'PB': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Punjab
    'PY': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Puducherry
    'RJ': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Rajasthan
    'SK': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Sikkim
    'TN': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Tamil Nadu
    'TR': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Tripura
    'TS': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Telangana
    'UK': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Uttarakhand
    'UP': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # Uttar Pradesh
    'WB': r'^[A-Z]{2}\s\d{2}\s[A-Z]{1,2}\s\d{4}$',  # West Bengal
}


# Create combined patterns for validation
all_states_pattern = '|'.join(state_patterns.values())
all_regex = re.compile(all_states_pattern)

# Open a video capture object (0 indicates the default camera)
cap = cv2.VideoCapture(0)

# Create a window for video display
cv2.namedWindow('Car Number Detection')

while True:
    # Read a frame from the camera
    ret, frame = cap.read()
    
    if not ret:
        break
    
    # Extract car number from the frame
    car_number = extract_car_number(frame)
    
    # Print the OCR output for debugging
    print("OCR Output:", car_number)
    
    # If car number is detected and valid, save to the 'car_no' table and calculate charges
    if car_number and all_regex.match(car_number):
        cursor = db.cursor()
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        query = "SELECT * from car_no where car_number=%s"
        cursor.execute(query, (car_number,))
        result = cursor.fetchone()
        
        payment_confirmation_event = threading.Event()

        if result:
            print("Detected Car Number:", car_number)
            
            # Get the timestamp from the database result
            db_timestamp = result[1]
            
            # Calculate total hours and charges
            total_hours, total_charge = calculate_charges(db_timestamp)
            
            print(f"Total Hours: {total_hours}")
            print(f"Total Charges: {total_charge} Rs")
            
            # Close the camera and break out of the loop
            cap.release()
            cv2.destroyAllWindows()
            html_content = f"""<!DOCTYPE html>
<html>
<head>
    <title>Payment Confirmation</title>
    <style>
        body {{
            background-color: black;
            color: white;
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 0;
            padding: 0;
        }}
        h1 {{
            font-size: 24px;
        }}
        p {{
            font-size: 18px;
        }}
        .container {{
            display: flex;
            flex-direction: column;
            align-items: center;
        }}
        .content {{
            max-width: 80%;
        }}
        img {{
            max-width: 20%;
            height: auto;
            margin-top: 20px;
        }}
        button#confirmBtn {{
            background-color: blue;
            color: white;
            font-size: 20px;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="content">
            <h1>Car Number and Charges</h1>
            <p>Car Number: {car_number}</p>
            <p>Total Charges: {total_charge} Rs</p>
            <img src="Eazepark copy.png" alt="Car Image">
        </div>
        <button id="confirmBtn">Yes, Payment Made</button>
    </div>
    <script>
        document.getElementById("confirmBtn").addEventListener("click", function() {{
            // Close the HTML file after confirmation
            window.close();
            
            // Set the 'money' variable to True
            var xhr = new XMLHttpRequest();
            xhr.open("GET", "/payment_status?money=True", true);
            xhr.send();
        }});
    </script>
</body>
</html>
"""

            
            with open("payment_confirmation.html", "w") as html_file:
                html_file.write(html_content)

            # Serve the HTML file on a local server
            server_address = ('', 8000)
            handler = SimpleHTTPRequestHandler
            
            def start_server():
                try:
                    httpd = TCPServer(server_address, handler)
                    httpd.serve_forever()
                except KeyboardInterrupt:
                    pass
            
            server_thread = threading.Thread(target=start_server)
            server_thread.daemon = True
            server_thread.start()

            # Wait for the server to start (you can add a delay if needed)
            time.sleep(2)
            
            # Open the HTML file in a web browser
            webbrowser.open("http://localhost:8000/payment_confirmation.html", new=2)
            
            # Wait for the payment confirmation
            payment_confirmation_event.wait()

            # Stop the local server
            server_thread.join()

            # Delete the MySQL record for the detected car_number
            delete_query = "DELETE FROM car_no WHERE car_number = %s"
            cursor.execute(delete_query, (car_number,))
            db.commit()  # Commit the changes to the database
            print(f"Deleted record for car_number: {car_number}")
            if money:
                import imaplib
                import email
                import re

                # Gmail IMAP settings
                username = "ineazepark@gmail.com"
                password = "hqkoabclvofhqlxt"

                # Connect to Gmail's IMAP server
                mail = imaplib.IMAP4_SSL("imap.gmail.com")
                mail.login(username, password)

                # Select the mailbox you want to read emails from (e.g., "inbox")
                mailbox = "inbox"
                mail.select(mailbox)

                # Search for all emails in the selected mailbox
                status, email_ids = mail.search(None, "ALL")

                # Get a list of email IDs and reverse the order to get the latest email first
                email_id_list = email_ids[0].split()[::-1]

                # Function to extract "Car Number" and "Money Paid" values
                def extract_car_number_and_money_paid(email_content):
                    car_number = ""
                    money_paid = ""
                    
                    car_number_match = re.search(r"Car Number: ([\w\s]+)(?=\s*Money Paid:|$)", email_content)
                    money_paid_match = re.search(r"Money Paid: (\d+)", email_content)
                    
                    if car_number_match:
                        car_number = car_number_match.group(1)
                    
                    if money_paid_match:
                        money_paid = money_paid_match.group(1)
                    
                    return car_number.strip(), money_paid.strip()

                # Iterate through the email IDs and fetch the emails (latest first)
                for email_id in email_id_list:
                    # Fetch the email using its unique ID
                    status, email_data = mail.fetch(email_id, "(BODY[TEXT])")
                    
                    # Parse the email content
                    email_message = email.message_from_bytes(email_data[0][1])
                    
                    # Extract "Car Number" and "Money Paid" as separate strings
                    email_content = email_message.get_payload()
                    car_number, money_paid = extract_car_number_and_money_paid(email_content)
                    
                    # Print the extracted values
                    break
                # Logout and close the connection
                mail.logout()
                if car_number == car_number_detected and money_paid == total_charge:
                    webbrowser.open('file:///F:/Project-Aira/new_pro/templates/thank_you.html', new=2)
                    time.sleep(3)
                    pyautogui.press('f11')
                    time.sleep(7)
                    pyautogui.press('f11')
                    time.sleep(2)
                    pyautogui.hotkey('ctrl', 'w')

                with open("payment_confirmation.html", "w") as html_file:
                    html_file.write(html_content)
                webbrowser.open("payment_confirmation.html", new=2)
                time.sleep(3)  # Adjust this delay as needed
                pyautogui.press('f11')
                time.sleep(7)
                pyautogui.press('f11')
                time.sleep(2)
                pyautogui.hotkey('ctrl', 'w')
                import webbrowser
                import time
                import pyautogui
                html_file_url = 'file:///F:/Project-Aira/new_pro/templates/thank_you.html'
                webbrowser.open(html_file_url, new=2)
                time.sleep(3)
                pyautogui.press('f11')
                time.sleep(7)
                pyautogui.press('f11')
                time.sleep(2)
                pyautogui.hotkey('ctrl', 'w')
                # Handle other parts of your code for processing money confirmation...

        else:
            html_file_url = 'file:///F:/Project-Aira/new_pro/templates/NoNotfound.html'
            webbrowser.open(html_file_url, new=2)
            time.sleep(3)
            pyautogui.press('f11')
            time.sleep(7)
            pyautogui.press('f11')
            time.sleep(2)
            pyautogui.hotkey('ctrl', 'w')

    # Display the frame
    cv2.imshow('Car Number Detection', frame)
    
    # Break the loop if 'q' key is pressed or a car number is detected
    if cv2.waitKey(1) & 0xFF == ord('q') or car_number_detected:
        break

# Release the video capture object and close all windows
cap.release()
cv2.destroyAllWindows()
#subprocess.run(["python", "F:\\Project-Aira\\new_pro\\testsign.py"])